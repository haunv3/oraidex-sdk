/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, Uint128} from "./types";
import {InstantiateMsg, ExecuteMsg, AssetInfo, QueryMsg, MigrateMsg, ConfigResponse, DistributionInfoResponse, RewardAmountPerSecondResponse} from "./OraiswapRewarder.types";
export interface OraiswapRewarderReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  distributionInfo: ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }) => Promise<DistributionInfoResponse>;
  rewardAmountPerSec: ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }) => Promise<RewardAmountPerSecondResponse>;
}
export class OraiswapRewarderQueryClient implements OraiswapRewarderReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.distributionInfo = this.distributionInfo.bind(this);
    this.rewardAmountPerSec = this.rewardAmountPerSec.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  distributionInfo = async ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }): Promise<DistributionInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      distribution_info: {
        asset_info: assetInfo
      }
    });
  };
  rewardAmountPerSec = async ({
    assetInfo
  }: {
    assetInfo: AssetInfo;
  }): Promise<RewardAmountPerSecondResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      reward_amount_per_sec: {
        asset_info: assetInfo
      }
    });
  };
}
export interface OraiswapRewarderInterface extends OraiswapRewarderReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    distributionInterval,
    owner,
    stakingContract
  }: {
    distributionInterval?: number;
    owner?: Addr;
    stakingContract?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distribute: ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapRewarderClient extends OraiswapRewarderQueryClient implements OraiswapRewarderInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.distribute = this.distribute.bind(this);
  }

  updateConfig = async ({
    distributionInterval,
    owner,
    stakingContract
  }: {
    distributionInterval?: number;
    owner?: Addr;
    stakingContract?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        distribution_interval: distributionInterval,
        owner,
        staking_contract: stakingContract
      }
    }, _fee, _memo, _funds);
  };
  distribute = async ({
    assetInfos
  }: {
    assetInfos: AssetInfo[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      distribute: {
        asset_infos: assetInfos
      }
    }, _fee, _memo, _funds);
  };
}