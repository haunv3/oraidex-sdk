diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
index 3aebdc5..71387b2 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
@@ -49,12 +49,12 @@ export declare class CosmWasmClient {
      * This uses auto-detection to decide between a Tendermint 0.37 and 0.34 client.
      * To set the Tendermint client explicitly, use `create`.
      */
-    static connect(endpoint: string | HttpEndpoint): Promise<CosmWasmClient>;
+    static connect(endpoint: string | HttpEndpoint, height?: number): Promise<CosmWasmClient>;
     /**
      * Creates an instance from a manually created Tendermint client.
      * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
      */
-    static create(tmClient: TendermintClient): Promise<CosmWasmClient>;
+    static create(tmClient: TendermintClient, height?: number): Promise<CosmWasmClient>;
     protected constructor(tmClient: TendermintClient | undefined);
     protected getTmClient(): TendermintClient | undefined;
     protected forceGetTmClient(): TendermintClient;
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
index 8f6305b..ae1944b 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
@@ -17,7 +17,7 @@ class CosmWasmClient {
      * This uses auto-detection to decide between a Tendermint 0.37 and 0.34 client.
      * To set the Tendermint client explicitly, use `create`.
      */
-    static async connect(endpoint) {
+    static async connect(endpoint, height = undefined) {
         // Tendermint/CometBFT 0.34/0.37 auto-detection. Starting with 0.37 we seem to get reliable versions again ðŸŽ‰
         // Using 0.34 as the fallback.
         let tmClient;
@@ -30,20 +30,20 @@ class CosmWasmClient {
             tm37Client.disconnect();
             tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
         }
-        return CosmWasmClient.create(tmClient);
+        return CosmWasmClient.create(tmClient, height);
     }
     /**
      * Creates an instance from a manually created Tendermint client.
      * Use this to use `Tendermint37Client` instead of `Tendermint34Client`.
      */
-    static async create(tmClient) {
-        return new CosmWasmClient(tmClient);
+    static async create(tmClient, height) {
+        return new CosmWasmClient(tmClient, height);
     }
-    constructor(tmClient) {
+    constructor(tmClient, height = undefined) {
         this.codesCache = new Map();
         if (tmClient) {
             this.tmClient = tmClient;
-            this.queryClient = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, modules_1.setupWasmExtension, stargate_1.setupTxExtension);
+            this.queryClient = stargate_1.QueryClient.withExtensions(tmClient, height, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, modules_1.setupWasmExtension, stargate_1.setupTxExtension);
         }
     }
     getTmClient() {
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js b/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
index c060369..41029c3 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
@@ -8,8 +8,8 @@ const encoding_1 = require("@cosmjs/encoding");
 const stargate_1 = require("@cosmjs/stargate");
 const query_1 = require("cosmjs-types/cosmwasm/wasm/v1/query");
 const long_1 = __importDefault(require("long"));
-function setupWasmExtension(base) {
-    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
+function setupWasmExtension(base, height) {
+    const rpc = (0, stargate_1.createProtobufRpcClient)(base, height);
     // Use this service to get easy typed access to query methods
     // This cannot be used for proof verification
     const queryService = new query_1.QueryClientImpl(rpc);
